1. Total number of films in each category.

SELECT * FROM film
SELECT * FROM film_category
SELECT * FROM category
--------------------------

SELECT 
    c.name AS category_name,
    COUNT(f.film_id) AS total_films
FROM 
    category c
JOIN 
    film_category fc ON c.category_id = fc.category_id
JOIN 
    film f ON fc.film_id = f.film_id
GROUP BY 
    c.name
ORDER BY 
    total_films DESC
	
2. Top 5 customers who have rented the most films.

select * from customer
select * from rental
----------------------

SELECT 
    c.customer_id,
    c.first_name,
    c.last_name,
    COUNT(r.rental_id) AS total_rentals
FROM 
    customer c
JOIN 
    rental r ON c.customer_id = r.customer_id
GROUP BY 
    c.customer_id, c.first_name, c.last_name
ORDER BY 
    total_rentals DESC
LIMIT 5

3. Number of rentals per month for the past year.

select * from rental
select min(rental_date) start_date,
	   max(rental_date) end_date
   from rental
------------------------------------

SELECT 
    DATE_TRUNC('month', rental_date) AS month,
    COUNT(*) AS number_of_rentals
FROM 
    rental
WHERE 
    rental_date >= DATE_TRUNC('month', rental_date) - INTERVAL '1 year'
GROUP BY 
    DATE_TRUNC('month', rental_date)
ORDER BY 
    month



4. Total revenue generated by each store

select * from store
select * from payment
select * from staff
--------------------------------

SELECT 
    s.store_id,
    SUM(p.amount) AS total_revenue
FROM 
    store s
JOIN 
    staff st ON s.store_id = st.store_id
JOIN 
    payment p ON st.staff_id = p.staff_id
GROUP BY 
    s.store_id
ORDER BY 
    total_revenue DESC


5. Average rental duration for each film. 

select * from rental
select * from film
select * from inventory
-----------------------------------
SELECT
    f.film_id,
    f.title,
    AVG(r.return_date - r.rental_date) AS average_rental_duration
FROM
    film f
JOIN
    inventory i ON f.film_id = i.film_id
JOIN
    rental r ON i.inventory_id = r.inventory_id
GROUP BY
    f.film_id, f.title
ORDER BY 
    average_rental_duration DESC


6. Films that have not been rented in the last 90 days.

select * from film
select * from rental
select * from inventory
----------------------------------------

SELECT
    f.film_id,
    f.title
FROM
    film f
JOIN
    inventory i ON f.film_id = i.film_id
LEFT JOIN
    rental r ON i.inventory_id = r.inventory_id
GROUP BY
    f.film_id, f.title
HAVING
    MAX(r.rental_date) < NOW() - INTERVAL '90 DAYS'


7. Update the rental table to mark rentals that are overdue (return_date is null and rental_duration exceeded).

select * from rental
ALTER TABLE rental ADD COLUMN status VARCHAR(20)
------------------------------------------------

UPDATE
    rental
SET
    status = 'overdue'
FROM
    inventory
JOIN
    film ON inventory.film_id = film.film_id
WHERE
    rental.inventory_id = inventory.inventory_id
    AND rental.return_date IS NULL
    AND rental.return_date > NOW() + INTERVAL '1 day' * film.rental_duration


8. Analyze the rental patterns to identify popular films, categories, and rental trends.
select * from film
select * from rental
select * from inventory
select * from category
-----------------------

-- a. Most Rented Films
SELECT film.title, COUNT(rental.rental_id) AS rental_count
FROM rental
JOIN inventory ON rental.inventory_id = inventory.inventory_id
JOIN film ON inventory.film_id = film.film_id
GROUP BY film.title
ORDER BY rental_count DESC
LIMIT 10

-- b. Most Popular Categories
SELECT category.name, COUNT(rental.rental_id) AS rental_count
FROM rental
JOIN inventory ON rental.inventory_id = inventory.inventory_id
JOIN film ON inventory.film_id = film.film_id
JOIN film_category ON film.film_id = film_category.film_id
JOIN category ON film_category.category_id = category.category_id
GROUP BY category.name
ORDER BY rental_count DESC
LIMIT 10

-- c. Rental trends over time
SELECT DATE_TRUNC('month', rental.rental_date) AS month, COUNT(rental.rental_id) AS rental_count
FROM rental
GROUP BY month
ORDER BY month


9. Identify any patterns in late returns and overdue rentals
select * from rental
select * from film
select * from inventory
-------------------------------------

-- a. Late Returns (returns after the due date)
SELECT rental.rental_id, 
       rental.rental_date, 
       rental.return_date, 
       film.rental_duration
FROM rental
JOIN inventory ON rental.inventory_id = inventory.inventory_id
JOIN film ON inventory.film_id = film.film_id
WHERE DATE_PART('day', rental.return_date - rental.rental_date) > film.rental_duration


-- b. Overdue Rentals (still not returned and past due date)
SELECT rental.rental_id, 
       rental.rental_date,
	   rental.status,
	   film.rental_duration      
FROM rental
JOIN inventory ON rental.inventory_id = inventory.inventory_id
JOIN film ON inventory.film_id = film.film_id
WHERE rental.status = 'overdue'

10. Insights and Recommendations for the Rental Store
select * from rental
select * from film
select * from inventory
Select * from customer
------------------------------------

-- a. Identify top customers by rental activity
SELECT customer.first_name, customer.last_name, COUNT(rental.rental_id) AS rental_count
FROM rental
JOIN customer ON rental.customer_id = customer.customer_id
GROUP BY customer.customer_id
ORDER BY rental_count DESC
LIMIT 10

-- b. Identify films that are frequently returned late
SELECT 
      rental.rental_date,
	  rental.return_date,
	  film.title,
	  film.rental_duration
FROM rental
JOIN inventory ON rental.inventory_id = inventory.inventory_id
JOIN film ON inventory.film_id = film.film_id
WHERE DATE_PART('day', rental.return_date - rental.rental_date) > film.rental_duration
GROUP BY rental.rental_date,
      rental.return_date,
	  film.title,
	  film.rental_duration 
LIMIT 10

-- c. Suggest increasing stock for popular films
SELECT film.title, COUNT(rental.rental_id) AS rental_count
FROM rental
JOIN inventory ON rental.inventory_id = inventory.inventory_id
JOIN film ON inventory.film_id = film.film_id
GROUP BY film.title
ORDER BY rental_count DESC
LIMIT 10
